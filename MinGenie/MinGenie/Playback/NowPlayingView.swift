import MusicKit
import SwiftUI

/// ‚úèÔ∏è ÌòÑÏû¨ Ïû¨ÏÉù (full Screen) ViewÏûÖÎãàÎã§ ‚úèÔ∏è
///  Ïï†Ìîå ÏòàÏ†úÏóêÏÑú ÏÇ¨Ïö©Ìï† Î∂ÄÎ∂ÑÎßå Ï∂îÎ†§ Ïò® Í±¥Îç∞, customÌïú Î∂ÄÎ∂ÑÎì§ ÌëúÏãúÌï¥ÎëêÍ≤†ÏäµÎãàÎã§!

struct NowPlayingView: View{
    
    /// queue ÏÉÅÌÉú Î∞õÏïÑÏôÄÏÑú ÌëúÏãúÌï† Í≤É
    @ObservedObject var playbackQueue: ApplicationMusicPlayer.Queue
    /// miniPlayerViewÏôÄ Ï†ÑÌôòÎêòÍ∏∞ ÏúÑÌïú bool
    @Environment(\.presentationMode) var presentation
    
    var body: some View{
        NavigationView{
            ZStack{
                VStack{
                    HStack{
                        /// ‚úÖ ÎîîÏûêÏù∏ ÏÑ∏Î∂Ä Ï°∞Ï†ï ÌïÑÏöî
                        VStack(alignment: .leading){
                            Text("(Ïï†Ìîå idÎãò,)")
                                .font(.title3)
                                .foregroundStyle(.black)
                            Text("Î™ªÌï† Í≤ÉÎèÑ ÏóÜÏßÄüî•")
                                .font(.title.bold())
                                .foregroundStyle(.blue)
                        }
                        Spacer()
                    }
                    .padding(.top,30)
                    .padding(.leading,30)
                    
                    NowPlayingCell(playbackQueue: playbackQueue, artwork: playbackQueue.currentEntry?.artwork, title: playbackQueue.currentEntry?.title, artist: playbackQueue.currentEntry?.subtitle )
                    
                }
                
                VStack{
                    /// grabber Î≤ÑÌäº - dismiss ÎèôÏûë ÎÑòÍ≤®Ï§å
                    DismissButton { dismiss() }
                    Spacer()
                }
                
                
            }
        }
        .gesture(
            /// fullScreenCoverÏóêÏÑú ÎìúÎûòÍ∑∏Î°ú dismissÌïòÍ∏∞ ÏúÑÌï¥ÏÑ† Ïª§Ïä§ÌÖÄÏù¥ ÌïÑÏöîÌï®
            DragGesture().onEnded { value in
                /// ÏÑ∏Î°úÎ°ú 150 Ïù¥ÏÉÅ ÏõÄÏßÅÏù¥Î©¥ dismiss
                if value.translation.height > 150 {
                    dismiss()
                }
            }
        )

    }
    
    
    private func dismiss() {
        presentation.wrappedValue.dismiss()
    }
    
    
    public struct DismissButton: View {
        ///Ïù¥Í±∞ ÏÑ†Ïñ∏Ìï† Îïå, dismiss ÎèôÏûë Î∞õÏïÑÏò¥.
        ///Î≤ÑÌäºÏùÑ ÎàåÎ†ÄÏùÑ Îïå ÏàòÌñâÌï† ÎèôÏûë(dismiss)ÏùÑ Îã¥ÏïÑ Ï¥àÍ∏∞Ìôî
        var action: () -> ()
        
        public init(_ action: @escaping () -> ()) {
            self.action = action
        }
        
        public var body: some View {
            Button(action: action) {
                /// grabber Î≤ÑÌäº Í∑∏Î¶º
                RoundedRectangle(cornerRadius: 16)
                    .fill(Color.gray)
                    .frame(width: 50, height: 5)
                    .padding()
            }
        }
    }
    
    
    /// üëáÏïÑÎûòÎäî ÎØ∏ÏÇ¨Ïö©Ï§ëÏù¥Í∏¥ ÌïúÎç∞, Ïû¨ÏÉùÎåÄÍ∏∞Î™©Î°ù ÎùÑÏö∞Î†§Î©¥ ÎÇòÏ§ëÏóê Ïì∏ Í±∞ Í∞ôÏïÑÏÑú ÎÇ®Í≤®Îë†
    @ViewBuilder
    private var content: some View{
        list(for: playbackQueue)
    }
    
    private func list(for playbackQueue: ApplicationMusicPlayer.Queue) -> some View{
        List{
            ForEach(playbackQueue.entries){ entry in
                PlayerMusicItemCell(
                    artwork: entry.artwork,
                    artworkSize: 44,
                    artworkCornerRadius: 4,
                    title: entry.title,
                    subtitle: entry.subtitle,
                    subtitleVerticalOffset: -2.0
                )
            }
            // ÌäπÏ†ï Î∞∞Ïó¥Ïùò Ïù∏Îç±Ïä§Í∞Ä offset
            .onDelete{ offsets in
                playbackQueue.entries.remove(atOffsets: offsets)
            }
            .onMove{ source, destination in
                playbackQueue.entries.move(fromOffsets: source, toOffset: destination)
            }
            .animation(.default, value: playbackQueue.entries)
            .toolbar {
                EditButton()
            }
        }
    }
}



